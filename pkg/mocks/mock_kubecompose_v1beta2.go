// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/docker/compose-on-kubernetes/api/client/clientset/typed/compose/v1beta2 (interfaces: StackInterface,StacksGetter,ComposeV1beta2Interface)

// Package mocks is a generated GoMock package.
package mocks

import (
	v1beta2 "github.com/docker/compose-on-kubernetes/api/client/clientset/typed/compose/v1beta2"
	v1beta20 "github.com/docker/compose-on-kubernetes/api/compose/v1beta2"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	reflect "reflect"
)

// MockStackInterface is a mock of StackInterface interface
type MockStackInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStackInterfaceMockRecorder
}

// MockStackInterfaceMockRecorder is the mock recorder for MockStackInterface
type MockStackInterfaceMockRecorder struct {
	mock *MockStackInterface
}

// NewMockStackInterface creates a new mock instance
func NewMockStackInterface(ctrl *gomock.Controller) *MockStackInterface {
	mock := &MockStackInterface{ctrl: ctrl}
	mock.recorder = &MockStackInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStackInterface) EXPECT() *MockStackInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockStackInterface) Create(arg0 *v1beta20.Stack) (*v1beta20.Stack, error) {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*v1beta20.Stack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockStackInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStackInterface)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockStackInterface) Delete(arg0 string, arg1 *v1.DeleteOptions) error {
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStackInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStackInterface)(nil).Delete), arg0, arg1)
}

// DeleteCollection mocks base method
func (m *MockStackInterface) DeleteCollection(arg0 *v1.DeleteOptions, arg1 v1.ListOptions) error {
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection
func (mr *MockStackInterfaceMockRecorder) DeleteCollection(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockStackInterface)(nil).DeleteCollection), arg0, arg1)
}

// Get mocks base method
func (m *MockStackInterface) Get(arg0 string, arg1 v1.GetOptions) (*v1beta20.Stack, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*v1beta20.Stack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStackInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStackInterface)(nil).Get), arg0, arg1)
}

// List mocks base method
func (m *MockStackInterface) List(arg0 v1.ListOptions) (*v1beta20.StackList, error) {
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(*v1beta20.StackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockStackInterfaceMockRecorder) List(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStackInterface)(nil).List), arg0)
}

// Patch mocks base method
func (m *MockStackInterface) Patch(arg0 string, arg1 types.PatchType, arg2 []byte, arg3 ...string) (*v1beta20.Stack, error) {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1beta20.Stack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch
func (mr *MockStackInterfaceMockRecorder) Patch(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockStackInterface)(nil).Patch), varargs...)
}

// Update mocks base method
func (m *MockStackInterface) Update(arg0 *v1beta20.Stack) (*v1beta20.Stack, error) {
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*v1beta20.Stack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockStackInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStackInterface)(nil).Update), arg0)
}

// UpdateStatus mocks base method
func (m *MockStackInterface) UpdateStatus(arg0 *v1beta20.Stack) (*v1beta20.Stack, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", arg0)
	ret0, _ := ret[0].(*v1beta20.Stack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockStackInterfaceMockRecorder) UpdateStatus(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockStackInterface)(nil).UpdateStatus), arg0)
}

// Watch mocks base method
func (m *MockStackInterface) Watch(arg0 v1.ListOptions) (watch.Interface, error) {
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockStackInterfaceMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockStackInterface)(nil).Watch), arg0)
}

// WithSkipValidation mocks base method
func (m *MockStackInterface) WithSkipValidation() v1beta2.StackInterface {
	ret := m.ctrl.Call(m, "WithSkipValidation")
	ret0, _ := ret[0].(v1beta2.StackInterface)
	return ret0
}

// WithSkipValidation indicates an expected call of WithSkipValidation
func (mr *MockStackInterfaceMockRecorder) WithSkipValidation() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithSkipValidation", reflect.TypeOf((*MockStackInterface)(nil).WithSkipValidation))
}

// MockStacksGetter is a mock of StacksGetter interface
type MockStacksGetter struct {
	ctrl     *gomock.Controller
	recorder *MockStacksGetterMockRecorder
}

// MockStacksGetterMockRecorder is the mock recorder for MockStacksGetter
type MockStacksGetterMockRecorder struct {
	mock *MockStacksGetter
}

// NewMockStacksGetter creates a new mock instance
func NewMockStacksGetter(ctrl *gomock.Controller) *MockStacksGetter {
	mock := &MockStacksGetter{ctrl: ctrl}
	mock.recorder = &MockStacksGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStacksGetter) EXPECT() *MockStacksGetterMockRecorder {
	return m.recorder
}

// Stacks mocks base method
func (m *MockStacksGetter) Stacks(arg0 string) v1beta2.StackInterface {
	ret := m.ctrl.Call(m, "Stacks", arg0)
	ret0, _ := ret[0].(v1beta2.StackInterface)
	return ret0
}

// Stacks indicates an expected call of Stacks
func (mr *MockStacksGetterMockRecorder) Stacks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stacks", reflect.TypeOf((*MockStacksGetter)(nil).Stacks), arg0)
}

// MockComposeV1beta2Interface is a mock of ComposeV1beta2Interface interface
type MockComposeV1beta2Interface struct {
	ctrl     *gomock.Controller
	recorder *MockComposeV1beta2InterfaceMockRecorder
}

// MockComposeV1beta2InterfaceMockRecorder is the mock recorder for MockComposeV1beta2Interface
type MockComposeV1beta2InterfaceMockRecorder struct {
	mock *MockComposeV1beta2Interface
}

// NewMockComposeV1beta2Interface creates a new mock instance
func NewMockComposeV1beta2Interface(ctrl *gomock.Controller) *MockComposeV1beta2Interface {
	mock := &MockComposeV1beta2Interface{ctrl: ctrl}
	mock.recorder = &MockComposeV1beta2InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComposeV1beta2Interface) EXPECT() *MockComposeV1beta2InterfaceMockRecorder {
	return m.recorder
}

// RESTClient mocks base method
func (m *MockComposeV1beta2Interface) RESTClient() rest.Interface {
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient
func (mr *MockComposeV1beta2InterfaceMockRecorder) RESTClient() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockComposeV1beta2Interface)(nil).RESTClient))
}

// Stacks mocks base method
func (m *MockComposeV1beta2Interface) Stacks(arg0 string) v1beta2.StackInterface {
	ret := m.ctrl.Call(m, "Stacks", arg0)
	ret0, _ := ret[0].(v1beta2.StackInterface)
	return ret0
}

// Stacks indicates an expected call of Stacks
func (mr *MockComposeV1beta2InterfaceMockRecorder) Stacks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stacks", reflect.TypeOf((*MockComposeV1beta2Interface)(nil).Stacks), arg0)
}
