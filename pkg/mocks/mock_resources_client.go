// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/docker/stacks/pkg/store (interfaces: ResourcesClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	api "github.com/docker/swarmkit/api"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockResourcesClient is a mock of ResourcesClient interface
type MockResourcesClient struct {
	ctrl     *gomock.Controller
	recorder *MockResourcesClientMockRecorder
}

// MockResourcesClientMockRecorder is the mock recorder for MockResourcesClient
type MockResourcesClientMockRecorder struct {
	mock *MockResourcesClient
}

// NewMockResourcesClient creates a new mock instance
func NewMockResourcesClient(ctrl *gomock.Controller) *MockResourcesClient {
	mock := &MockResourcesClient{ctrl: ctrl}
	mock.recorder = &MockResourcesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourcesClient) EXPECT() *MockResourcesClientMockRecorder {
	return m.recorder
}

// CreateExtension mocks base method
func (m *MockResourcesClient) CreateExtension(arg0 context.Context, arg1 *api.CreateExtensionRequest, arg2 ...grpc.CallOption) (*api.CreateExtensionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExtension", varargs...)
	ret0, _ := ret[0].(*api.CreateExtensionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExtension indicates an expected call of CreateExtension
func (mr *MockResourcesClientMockRecorder) CreateExtension(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtension", reflect.TypeOf((*MockResourcesClient)(nil).CreateExtension), varargs...)
}

// CreateResource mocks base method
func (m *MockResourcesClient) CreateResource(arg0 context.Context, arg1 *api.CreateResourceRequest, arg2 ...grpc.CallOption) (*api.CreateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateResource", varargs...)
	ret0, _ := ret[0].(*api.CreateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResource indicates an expected call of CreateResource
func (mr *MockResourcesClientMockRecorder) CreateResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockResourcesClient)(nil).CreateResource), varargs...)
}

// GetResource mocks base method
func (m *MockResourcesClient) GetResource(arg0 context.Context, arg1 *api.GetResourceRequest, arg2 ...grpc.CallOption) (*api.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResource", varargs...)
	ret0, _ := ret[0].(*api.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource
func (mr *MockResourcesClientMockRecorder) GetResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockResourcesClient)(nil).GetResource), varargs...)
}

// ListResources mocks base method
func (m *MockResourcesClient) ListResources(arg0 context.Context, arg1 *api.ListResourcesRequest, arg2 ...grpc.CallOption) (*api.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResources", varargs...)
	ret0, _ := ret[0].(*api.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources
func (mr *MockResourcesClientMockRecorder) ListResources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockResourcesClient)(nil).ListResources), varargs...)
}

// RemoveResource mocks base method
func (m *MockResourcesClient) RemoveResource(arg0 context.Context, arg1 *api.RemoveResourceRequest, arg2 ...grpc.CallOption) (*api.RemoveResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveResource", varargs...)
	ret0, _ := ret[0].(*api.RemoveResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveResource indicates an expected call of RemoveResource
func (mr *MockResourcesClientMockRecorder) RemoveResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveResource", reflect.TypeOf((*MockResourcesClient)(nil).RemoveResource), varargs...)
}

// UpdateResource mocks base method
func (m *MockResourcesClient) UpdateResource(arg0 context.Context, arg1 *api.UpdateResourceRequest, arg2 ...grpc.CallOption) (*api.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResource", varargs...)
	ret0, _ := ret[0].(*api.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResource indicates an expected call of UpdateResource
func (mr *MockResourcesClientMockRecorder) UpdateResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockResourcesClient)(nil).UpdateResource), varargs...)
}
